<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://cxf.apache.org/jaxws
		http://cxf.apache.org/schemas/jaxws.xsd"
		default-autowire="byName">
		
	<context:component-scan base-package="org.dmack.statsapp.services" />
	<context:annotation-config/>

    <context:property-placeholder location="file:///${user.home}/.statsapp/statsapp.local.application.properties"/>
    
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="StatsAppPersistence" />
		<property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop> 
            </props>
        </property>

        <property name="dataSource" ref="dataSource"/>
	</bean>

	<!-- Out of Container DataSource
	<bean id="rawDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${hibernate.jdbc.driverClassName}" />
		<property name="url" value="${hibernate.connection.url}" />
		<property name="username" value="${hibernate.connection.username}" />
		<property name="password" value="${hibernate.connection.password}" />
	</bean> -->
	
	<!-- In Container DataSource 
	<bean id="rawDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="oracleDataSource"/>
    </bean>
    
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
		<property name="targetDataSource" ref="rawDataSource" />
	</bean>-->

	<!--
		enable the configuration of transactional behavior based on
		annotations -->
	
	
	<tx:annotation-driven transaction-manager="transactionManager" />


	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
    
    <bean id="generalUserRepository"
        class="org.dmack.statsapp.repository.GenericRepositoryJPAImpl">
        <constructor-arg
            value="org.dmack.statsapp.domain.GeneralUser" />
    </bean> 
	
	<bean id="playerRepository"
        class="org.dmack.statsapp.repository.GenericRepositoryJPAImpl">
        <constructor-arg
            value="org.dmack.statsapp.domain.Player" />
    </bean>
	
	<bean id="matchRepository"
        class="org.dmack.statsapp.repository.GenericRepositoryJPAImpl">
        <constructor-arg
            value="org.dmack.statsapp.domain.Match" />
    </bean>
	
	<!--
	<bean class="org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter">
    	<property name="baseAddress" value="http://localhost:9999/"/>
	</bean>
	-->
	
	<bean id="matchService"
        class="org.dmack.statsapp.services.MatchServiceImpl">
    </bean>
	
	<bean id="matchServiceEndpoint"
        class="org.dmack.statsapp.services.MatchServiceEndpoint">
    </bean>
	
	<jaxws:endpoint 
	  id="matchServiceWS" 
	  implementor="#matchServiceEndpoint"
	  address="/matchservice" />
	
	<jaxws:client
	  id="matchServiceClient" 
	  serviceClass="org.dmack.statsapp.services.MatchService"
	  address="http://localhost:7002/statsapp/services/matchservice" />

</beans>
